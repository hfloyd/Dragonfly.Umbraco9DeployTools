@using Dragonfly.NetHelpers
@using Dragonfly.Umbraco9DeployTools.Models;

@model ComparisonResults

@{
	//IEnumerable<AuditableContent> contentList = Model.ToList();

	//var propertyAlias = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewDataString(ViewData, "PropertyAlias");
	//var includeUnpublished = Dragonfly.UmbracoHelpers.Mvc.GetSafeViewDataBool(ViewData, "IncludeUnpublished");

	var counter = 0;

	//var filterdByDoctype = Dragonfly.NetHelpers.Urls.GetSafeQueryString(Request, "DocTypeAlias", "");
}

<!DOCTYPE html>
<html>
<head>
	<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" />
	<link href="https://cdnjs.cloudflare.com/ajax/libs/datatables/1.10.12/css/dataTables.bootstrap.min.css" rel="stylesheet" />
	
	<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/datatables/1.10.12/js/jquery.dataTables.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/datatables/1.10.12/js/dataTables.bootstrap.min.js"></script>

	@*<style>
		{

		}
		</style>*@
	@*<!--<script src="/scripts/snippet-javascript-console.min.js?v=1"></script>-->*@
</head>
<body>
	<div class="container-full" style="margin: 0 10px;">

		<h1>Comparing Content</h1>

		<h5>Current Environment = @Model.LocalEnvironment.Name</h5>
		<h5>Remote Environment = @Model.RemoteEnvironment.Name</h5>

		<ol>
			<li><a href="#RemoteNotLocal">Remote - Not Local</a> [@Model.RemoteNotLocal.Count()]</li>
			<li><a href="#LocalNotRemote">Local - Not Remote</a> [@Model.LocalNotRemote.Count()]</li>
			<li><a href="#Different">Different Between Environments</a> </li>
		</ol>

		<h2 id="RemoteNotLocal">Remote - Not Local <br /><small>[Consider Restoring these]</small></h2>
		<p>Total Nodes: @Model.RemoteNotLocal.Count()</p>

		@if(Model.RemoteNotLocal.Any())
		{	RenderMissingFromEnvironmentNodesTable(Model.RemoteNotLocal, "Local");
		}
		
		<h2 id="LocalNotRemote">Local - Not Remote <br /><small>[Consider Transferring these]</small></h2>
		<p>Total Nodes: @Model.LocalNotRemote.Count()</p>

		@if(Model.LocalNotRemote.Any())
		{	RenderMissingFromEnvironmentNodesTable(Model.LocalNotRemote, "Remote");
		}

		<h2 id="Different">Different Between Environments</h2>

	</div>



</body>
</html>

@functions {

	private void RenderMissingFromEnvironmentNodesTable(IEnumerable<ContentNodeDataItem> ContentNodeDataItems, string MissingFromEnvironment)
	{
		var tableId = $"umbracodata_Missing_{MissingFromEnvironment.MakeCodeSafe()}";
		var counter = 1;

		<table id="@tableId" class="table table-striped table-bordered table-hover table-sm" cellspacing="0" style="width:100%">
			<thead>
				<tr>
					<th>#</th>
					<th>Actions</th>
					<th>Node Name</th>
					<th>NodeID</th>
					@*<th>Node Path</th>*@
					<th>DocType</th>
					<th>Parent</th>
					<th>Level</th>
					<th>Sort Order</th>
					@*<th>Assigned Template</th>*@
					<th>Last Edited Date</th>
					<th>Edited By</th>
					<th>UDI</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var node in ContentNodeDataItems)
				{
					counter++;
				
					<tr>
						<td>@counter</td>

						@* //Actions*@
						<td>
							@try
							{
								Html.RenderPartial("/App_Plugins/Dragonfly.DeployTools/RazorViews/DataFormats/NodeActions.cshtml", node);
							}
							catch (Exception e)
							{
								<span>Error on Node # @node.NodeId : @e.Message</span>
							}
						</td>

						@* //Node Name*@
						<td>@node.NodeName</td>

						@* //Node ID*@
						<td>@node.NodeId</td>

						@* //Node Path
						<td>@node.NodePathAsText</td>*@

						@* //DocType*@
						<td>@node.ContentTypeAlias</td>

						@* //Parent*@
						<td>@node.ParentNodeUdi</td>
						
						@* //Level*@
						<td>@node.LevelNum</td>

						@* //Sort Order*@
						<td>@node.OrderNum</td>

						@* //Template Name
						<td>@node.TemplateAlias</td>*@

						@*//Date Last Edited*@
						<td>
							@{ Html.RenderPartial("/App_Plugins/Dragonfly.DeployTools/RazorViews/DataFormats/DateValue.cshtml", node.LastEditedDate); }
						</td>

						@* //Edited By *@
						<td>@node.LastEditedByUser</td>

						@* //Node UDI*@
						<td><small>@node.NodeUdi</small></td>
					</tr>
				}
			</tbody>
			<tfoot>
				<tr>
					<td>#</td>
					<td>Actions</td>
					<th>Name</th>
					<th>ID</th>
					@*<th>Path</th>*@
					<th>DocType</th>
					<th>Parent</th>
					<td>Level</td>
					<td>Order</td>
					@*<th>Template</th>*@
					<th>Edited Date</th>
					<th>Edited By</th>
					<td>UDI</td>
				</tr>
			</tfoot>
		</table>

		RenderTableScripts(tableId);
	}

	private void RenderTableScripts(string TableId)
	{
		<script type="text/javascript">
			$(document).ready(function () {
				// Setup - add a text input to each footer cell
				$('#@TableId tfoot th').each( function () {
					var title = $(this).text();
					$(this).html( '<input type="text" style="font-size:10px; width:100%;" placeholder="Search '+title+'" />' );
				} );

				// DataTable
				$('#@TableId').DataTable({
					initComplete: function () {
						// Apply the search
						this.api().columns().every( function () {
							var that = this;

							$( 'input', this.footer() ).on( 'keyup change clear', function () {
								if ( that.search() !== this.value ) {
									that
										.search( this.value )
										.draw();
								}
							} );
						} );
					}
				});

			});
		</script>
	}

}
@using Dragonfly.NetHelpers
@using Dragonfly.NetModels
@using Dragonfly.Umbraco9DeployTools
@using Dragonfly.Umbraco9DeployTools.Models;
@using Dragonfly.UmbracoHelpers
@using Newtonsoft.Json
@using Umbraco.Extensions

@model List<Workspace>
@*
	Expected View Data:
	-------------------
	StandardInfo (object - StandardViewInfo)		: Version, Current environment, etc.
	Status (object - StatusMessage)					: Status of operations
	LocalFilesInfo (object - List<INodesDataFile>)  : Info about all local files
	SyncData (object - SyncDateInfoFile)			: Info about stored Sync data
*@
@{
	var paramStandardInfo = Mvc.GetSafeViewData(ViewData, "StandardInfo", new StandardViewInfo()) as StandardViewInfo;
	var paramStatus = Mvc.GetSafeViewData(ViewData, "Status", new StatusMessage()) as StatusMessage;
	var paramLocalFilesInfo = Mvc.GetSafeViewData(ViewData, "LocalFilesInfo") as List<INodesDataFile>;
	var paramSyncData = Mvc.GetSafeViewData(ViewData, "SyncData", new SyncDateInfoFile()) as SyncDateInfoFile;

	//var updatedDate = DateTime.Now.AddDays(-1).ToUniversalTime();

	//List of All workspaces - add current environment, if not in list (ex: Local)
	var workspaces = new List<Workspace>();
	if (!Model.Select(n => n.Type).Contains(paramStandardInfo.CurrentEnvironment.Type))
	{
		workspaces.Add(paramStandardInfo.CurrentEnvironment);
	}
	workspaces.AddRange(Model);

	var remoteActions = new Dictionary<string, string>()
	{
		{ "Fetch All Remote Nodes Data (Last run)", "/umbraco/backoffice/Dragonfly/DeployTools/FetchAllRemoteNodesData?UpdateRemoteFirst=false&EnvironmentType=" },
		{ "Fetch All Remote Nodes Data (Most current)", "/umbraco/backoffice/Dragonfly/DeployTools/FetchAllRemoteNodesData?UpdateRemoteFirst=true&EnvironmentType=" },
		{ "Compare Local to Remote [Content]", "/umbraco/backoffice/Dragonfly/DeployTools/CompareContent?EnvironmentType=" },
	};

	var localActions = new Dictionary<string, string>()
	{
		{ "Update All Local Nodes Data", "/umbraco/backoffice/Dragonfly/DeployTools/UpdateAllLocalNodesData" },
		{ "Update Local Content Nodes Data", "/umbraco/backoffice/Dragonfly/DeployTools/UpdateLocalContentNodesData" },
		{ "Update Local Media Nodes Data", "/umbraco/backoffice/Dragonfly/DeployTools/UpdateLocalMediaNodesData" }
	};

	var currEnvName = paramStandardInfo != null ? paramStandardInfo.CurrentEnvironment.Name : "Unknown";
	var currVersion = paramStandardInfo != null ? paramStandardInfo.CurrentToolVersion.ToString() : "Unknown";
}

<!DOCTYPE html>
<html>
<head>
	<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" />
	<link href="https://cdnjs.cloudflare.com/ajax/libs/datatables/1.10.12/css/dataTables.bootstrap.min.css" rel="stylesheet" />
	<link href="/App_Plugins/Dragonfly.DeployTools/styles.css" rel="stylesheet" />

	@*<style>
		{

		}
		</style>*@
	@*<!--<script src="/scripts/snippet-javascript-console.min.js?v=1"></script>-->*@
</head>
<body>
	<div class="container-full" style="margin: 0 10px;">

		<h1>Dragonfly Deploy Tools <small>v. @currVersion</small></h1>

		<h2>Current Environment: @currEnvName</h2>
		<a class="btn btn-info" href="/umbraco/backoffice/Dragonfly/DeployTools/UpdateAllLocalNodesData" target="_blank">Update All Local Nodes Data</a>

		<h2>Available Files</h2>
		@if (paramLocalFilesInfo != null && paramLocalFilesInfo.Any())
		{
			<table id="umbracodata_Files" class="table table-striped table-bordered table-hover table-sm" cellspacing="0" style="width: 100%">
				<thead>
					<tr>
						<th>Environment</th>
						<th>Nodes Type</th>
						<th>Total Nodes</th>
						<th>Timestamp</th>
						<th>Generation Time</th>
					</tr>
				</thead>
				<tbody>

					@foreach (var file in paramLocalFilesInfo)
					{
						<tr>
							<td>@(file.Environment!=null ?file.Environment.Name: "Unknown")</td>
							<td>@file.Type</td>
							<td>@file.TotalNodes</td>
							<td>@file.TimestampUtc.ToString("yyyy-MM-dd HH:mm:ss UTC") [@file.GetReadableTimestamp(true)]</td>
							<td>@file.TimeToGenerate [@file.GetTimeToGenerateDisplay()]</td>
						</tr>
					}
				</tbody>
			</table>
		}
		else
		{
			<p>No files available locally. [@Html.If(paramLocalFilesInfo == null, "NULL", "0")]</p>
		}

		<h2>Remote Environments Actions</h2>
		<table id="umbracodata_Environments" class="table table-striped table-bordered table-hover table-sm" cellspacing="0" style="width:100%">
			<thead>
				<tr>
					<th>&nbsp;</th>
					@foreach (var env in workspaces)
					{
						var className = env.Type == paramStandardInfo.CurrentEnvironment.Type ? "active" : "";

						<th class="@className">@env.Name</th>
					}
				</tr>
			</thead>
			<tbody>
				@foreach (var action in localActions)
				{
					<tr>
						<td>@action.Key</td>

						@foreach (var env in workspaces)
						{
							var className = env.Type == paramStandardInfo.CurrentEnvironment.Type ? "active" : "";
							if (env.Type == paramStandardInfo.CurrentEnvironment.Type)
							{
								var actionUrl = $"{action.Value}";

								<td class="@className"><a href="@actionUrl" target="_blank" class="btn btn-info">Run</a></td>
							}
							else
							{
								<td class="@className"><i>N/A</i></td>
							}
						}
					</tr>
				}

				@foreach (var action in remoteActions)
				{
					<tr>
						<td>@action.Key</td>

						@foreach (var env in workspaces)
						{
							var className = env.Type == paramStandardInfo.CurrentEnvironment.Type ? "active" : "";
							if (env.Type != paramStandardInfo.CurrentEnvironment.Type)
							{
								var actionUrl = $"{action.Value}{env.Type}";

								<td class="@className"><a href="@actionUrl" target="_blank" class="btn btn-info">Run</a></td>
							}
							else
							{
								<td class="@className"><i>N/A</i></td>
							}
						}
					</tr>
				}
				@if (paramSyncData.Syncs.Any())
				{
					foreach (var nodeType in paramSyncData.Syncs.Select(n => n.Type).Distinct().OrderBy(n => n))
					{
						<tr>
							<td>Compare Local to Remote [@nodeType.ToString()] - Changed Since Last Sync Date</td>

							@foreach (var env in workspaces)
							{
								var className = env.Type == paramStandardInfo.CurrentEnvironment.Type ? "active" : "";
								if (env.Type != paramStandardInfo.CurrentEnvironment.Type)
								{
									var syncMatches = paramSyncData.Syncs.Where(n => n.Type == nodeType && n.RemoteEnvironment.Type == env.Type);
									if (syncMatches.Any())
									{
										var syncDate = syncMatches.First().SyncDate;
										var actionUrl = $"/umbraco/backoffice/Dragonfly/DeployTools/CompareContent?UpdatedSince={syncDate}&EnvironmentType={env.Type}";

										<td class="@className"><a href="@actionUrl" target="_blank" class="btn btn-info">Run</a><br /><small>@syncDate.GetReadableUtcTimestamp(true)</small></td>
									}
									else
									{
										<td class="@className"><i>N/A</i></td>
									}
								}
								else
								{
									<td class="@className"><i>N/A</i></td>
								}
							}
						</tr>
					}
				}
			</tbody>
		</table>

		<h2>Status</h2>
		@try
		{
			Html.RenderPartial("/App_Plugins/Dragonfly.DeployTools/RazorViews/DataFormats/RenderStatusMessage.cshtml", paramStatus);
		}
		catch (Exception e)
		{
			<span>Unable to render Status : @e.Message</span>
		}


		@*	<textarea rows="20" cols="200">
			@JsonConvert.SerializeObject(paramStatus);
			</textarea>*@

	</div>

	<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/datatables/1.10.12/js/jquery.dataTables.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/datatables/1.10.12/js/dataTables.bootstrap.min.js"></script>

	@{
		RenderTableScripts("umbracodata_Files");
		//RenderTableScripts("umbracodata_Environments");
	}

</body>
</html>

@functions {


	private void RenderTableScripts(string TableId)
	{
		<script type="text/javascript">
			$(document).ready(function () {
				// Setup - add a text input to each footer cell
				$('#@TableId tfoot th').each( function () {
					var title = $(this).text();
					$(this).html( '<input type="text" style="font-size:10px; width:100%;" placeholder="Search '+title+'" />' );
				} );

				// DataTable
				$('#@TableId').DataTable({
					initComplete: function () {
						// Apply the search
						this.api().columns().every( function () {
							var that = this;

							$( 'input', this.footer() ).on( 'keyup change clear', function () {
								if ( that.search() !== this.value ) {
									that
										.search( this.value )
										.draw();
								}
							} );
						} );
					}
				});

			});
		</script>
	}

}